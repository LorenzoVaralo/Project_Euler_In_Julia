### A Pluto.jl notebook ###
# v0.18.4

using Markdown
using InteractiveUtils

# ╔═╡ 6a24467c-ac55-11ec-1da7-db9c5ba34947
include("$(@__DIR__)/Check.jl")

# ╔═╡ 495a812a-61cc-42db-8af5-cbb70b968d92
#=
   The four adjacent digits in the 1000-digit number that have the greatest
   product are 9 × 9 × 8 × 9 = 5832.

               73167176531330624919225119674426574742355349194934
               96983520312774506326239578318016984801869478851843
               85861560789112949495459501737958331952853208805511
               12540698747158523863050715693290963295227443043557
               66896648950445244523161731856403098711121722383113
               62229893423380308135336276614282806444486645238749
               30358907296290491560440772390713810515859307960866
               70172427121883998797908792274921901699720888093776
               65727333001053367881220235421809751254540594752243
               52584907711670556013604839586446706324415722155397
               53697817977846174064955149290862569321978468622482
               83972241375657056057490261407972968652414535100474
               82166370484403199890008895243450658541227588666881
               16427171479924442928230863465674813919123162824586
               17866458359124566529476545682848912883142607690042
               24219022671055626321111109370544217506941658960408
               07198403850962455444362981230987879927244284909188
               84580156166097919133875499200524063689912560717606
               05886116467109405077541002256983155200055935729725
               71636269561882670428252483600823257530420752963450

   Find the thirteen adjacent digits in the 1000-digit number that have the
   greatest product. What is the value of this product?
=#

# ╔═╡ 685b4770-e267-4a02-9954-40f6c71f11e9
Total_number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637448440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

# ╔═╡ 7644617d-238b-48cd-996f-d93d4126371c
digits(parse(BigInt, Total_number), base=10)

# ╔═╡ fb3e9864-c1bf-4101-8d58-1adedc929d9d
function maiorSequencia()
	maior = 0
	for i in 1:length(Total_number)-12
		soma = prod(digits(parse(Int, Total_number[i:i+12])))
		if soma > maior
			maior = soma
		end
	end
	return maior
end

# ╔═╡ eafd94b7-1f25-4ab5-b16d-7a74c14c91eb
resposta = maiorSequencia()

# ╔═╡ 34b00754-d6e7-4121-bcfc-fe428c90c9b3
Check(8, resposta)

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.7.2"
manifest_format = "2.0"

[deps]
"""

# ╔═╡ Cell order:
# ╠═6a24467c-ac55-11ec-1da7-db9c5ba34947
# ╠═495a812a-61cc-42db-8af5-cbb70b968d92
# ╠═685b4770-e267-4a02-9954-40f6c71f11e9
# ╠═7644617d-238b-48cd-996f-d93d4126371c
# ╠═fb3e9864-c1bf-4101-8d58-1adedc929d9d
# ╠═eafd94b7-1f25-4ab5-b16d-7a74c14c91eb
# ╠═34b00754-d6e7-4121-bcfc-fe428c90c9b3
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
